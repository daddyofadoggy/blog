{"title":"LLM From Scratch","markdown":{"yaml":{"title":"LLM From Scratch","author":"Dipankar Baisya","date":"2025-10-29","categories":["LLM","ML","Deep Learning"],"image":"image.jpg","toc":true,"toc-depth":1,"toc-title":"Table of Contents","format":{"html":{"anchor-sections":true}}},"headingText":"1. Set up","containsRefs":false,"markdown":"\n\n\n## Create a virtual environment\n\nI highly recommend installing Python packages in a separate virtual environment to avoid modifying system-wide packages that your OS may depend on. To create a virtual environment in the current folder, follow the three steps below.\n\n<br>\n\n**1. Install uv**\n\n```bash\npip install uv\n```\n\n<br>\n\n**2. Create the virtual environment**\n\n```bash\nuv venv --python=python3.10\n```\n\n<br>\n\n**3. Activate the virtual environment**\n\n```bash\nsource .venv/bin/activate\n```\n&nbsp;\n\nNote that you need to activate the virtual environment each time you start a new terminal session. For example, if you restart your terminal or computer and want to continue working on the project the next day, simply run `source .venv/bin/activate` in the project folder to reactivate your virtual environment.\n\nOptionally, you can deactivate the environment it by executing the command `deactivate`.\n\n&nbsp;\n**4.Install packages**\n\nAfter activating your virtual environment, you can install Python packages using `uv`. For example:\n\n```bash\nuv pip install packaging\n```\n\nTo install all required packages from a `requirements.txt` file (such as the one located at the top level of this GitHub repository) run the following command, assuming the file is in the same directory as your terminal session:\n\n```bash\nuv pip install -r requirements.txt\n```\n\n\nAlternatively, install the latest dependencies directly from the repository:\n\n```bash\nuv pip install -r https://raw.githubusercontent.com/rasbt/LLMs-from-scratch/refs/heads/main/requirements.txt\n```\n\n\n&nbsp;\n\n**Note:**\nIf you have problems with the following commands above due to certain dependencies (for example, if you are using Windows), you can always fall back to using regular pip:\n\n `pip install -r requirements.txt`\n or\n`pip install -U -r https://raw.githubusercontent.com/rasbt/LLMs-from-scratch/refs/heads/main/requirements.txt`\n\n&nbsp;\n\n# 2. Working with text data\n\nThis section explores techniques for processing and working with text data for language models.\n```{python}\n#| echo: false\n#| output: false\n\n# This cell is used to set up the environment for the embedded notebook\n# It won't be displayed in the output\nimport sys\nimport os\n```\n\n{{< embed chapters/ch02.ipynb >}}\n\n# 3. Coding Attention Mechanisms\n\n{{< embed chapters/ch03.ipynb >}}\n\n# 4. Implementing a GPT model from Scratch To Generate Text \n\n{{< embed chapters/ch04.ipynb >}}\n\n# 5. Pretraining on Unlabeled Data\n\n{{< include chapters/ch05.md  >}}\n\n# 6. Finetuning for Text Classification\n\n{{< embed chapters/ch06.ipynb >}}\n\n# 7. Finetuning to Follow Instruction\n\n{{< embed chapters/ch07.ipynb >}}\n\n# 8. DPO for LLM Alignment\n\n{{< embed chapters/ch08.ipynb >}}\n\n# 9. Deployment in HF-Hub using Gradio\n\n```{python}\n#| echo: true \n#| output: false\n#| eval: false\n#| code-line-numbers: true\n#| code-copy: true\n\nfrom pathlib import Path\nimport sys\n\nimport tiktoken\nimport torch\nimport gradio as gr\n\n# For llms_from_scratch installation instructions, see:\n# https://github.com/rasbt/LLMs-from-scratch/tree/main/pkg\nfrom previous_chapters import GPTModel\n\nfrom previous_chapters import (\n    generate,\n    text_to_token_ids,\n    token_ids_to_text,\n)\n\ndevice = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n\n\ndef get_model_and_tokenizer():\n    \"\"\"\n    Code to load a GPT-2 model with finetuned weights generated in chapter 7.\n    This requires that you run the code in chapter 7 first, which generates the necessary gpt2-medium355M-sft.pth file.\n    \"\"\"\n\n    GPT_CONFIG_355M = {\n        \"vocab_size\": 50257,     # Vocabulary size\n        \"context_length\": 1024,  # Shortened context length (orig: 1024)\n        \"emb_dim\": 768,         # Embedding dimension\n        \"n_heads\": 12,           # Number of attention heads\n        \"n_layers\": 12,          # Number of layers\n        \"drop_rate\": 0.0,        # Dropout rate\n        \"qkv_bias\": True         # Query-key-value bias\n    }\n\n    tokenizer = tiktoken.get_encoding(\"gpt2\")\n\n    # For local development\n    model_path = Path(\"gpt2-small124M-sft.pth\")\n    \n    # For Hugging Face deployment\n    hf_model_path = Path(\"gpt2-small124M-sft.pth\")\n    \n    # Try loading from the Hugging Face model path first, then fall back to local\n    if hf_model_path.exists():\n        model_path = hf_model_path\n    elif not model_path.exists():\n        print(\n            f\"Could not find the model file. Please run the chapter 7 code \"\n            \"to generate the gpt2-medium355M-sft.pth file or upload it to this directory.\"\n        )\n        sys.exit()\n\n    checkpoint = torch.load(model_path, weights_only=True)\n    model = GPTModel(GPT_CONFIG_355M)\n    model.load_state_dict(checkpoint)\n    model.to(device)\n    model.eval()  # Set to evaluation mode\n\n    return tokenizer, model, GPT_CONFIG_355M\n\n\ndef extract_response(response_text, input_text):\n    return response_text[len(input_text):].replace(\"### Response:\", \"\").strip()\n\n\n# Load model and tokenizer\ntokenizer, model, model_config = get_model_and_tokenizer()\n\n\ndef generate_response(message, max_new_tokens=100):\n    \"\"\"Generate a response using the fine-tuned GPT model\"\"\"\n    torch.manual_seed(123)\n    \n    prompt = f\"\"\"Below is an instruction that describes a task. Write a response\n    that appropriately completes the request.\n\n    ### Instruction:\n    {message}\n    \"\"\"\n    \n    with torch.no_grad():  # Ensure no gradients are computed during inference\n        token_ids = generate(\n            model=model,\n            idx=text_to_token_ids(prompt, tokenizer).to(device),\n            max_new_tokens=max_new_tokens,\n            context_size=model_config[\"context_length\"],\n            eos_id=50256\n        )\n\n    text = token_ids_to_text(token_ids, tokenizer)\n    response = extract_response(text, prompt)\n    \n    return response\n\n\n# Create a custom chat interface without using ChatInterface class\ndef respond(message, chat_history):\n    bot_message = generate_response(message)\n    chat_history.append((message, bot_message))\n    return \"\", chat_history\n\n\nwith gr.Blocks(theme=\"soft\") as demo:\n    gr.Markdown(\"# Fine-tuned GPT Model Chat\")\n    gr.Markdown(\"Chat with a fine-tuned GPT model from 'Build a Large Language Model From Scratch' by Sebastian Raschka\")\n    \n    chatbot = gr.Chatbot(height=600)\n    msg = gr.Textbox(placeholder=\"Ask me something...\", container=False, scale=7)\n    clear = gr.Button(\"Clear\")\n    \n    msg.submit(respond, [msg, chatbot], [msg, chatbot])\n    clear.click(lambda: [], None, chatbot)\n    \n    gr.Examples(\n        examples=[\n            \"What is the capital of France?\",\n            \"What is the opposite of 'wet'?\",\n            \"what is the capital of USA?\"\n        ],\n        inputs=msg\n    )\n\n\n# Launch the interface\nif __name__ == \"__main__\":\n    demo.launch(share=True)\n\n```\n\n## Fine-tuned GPT Model Demo\n\nThis interactive demo showcases a GPT model fine-tuned using techniques from \"Build a Large Language Model From Scratch\" by Sebastian Raschka. Try asking questions or giving it instructions to see the model in action.\n\n```{=html}\n<div class=\"gradio-embed-container\">\n  <!-- Fallback image that displays if iframe fails to load -->\n  <div id=\"fallback-container\" style=\"display: none; text-align: center; margin: 20px 0;\">\n  <p style=\"color: #d32f2f; font-weight: bold;\">Interactive demo could not be loaded</p>\n  <img \n    src=\"chapters/HF_GPT2.png\" \n    alt=\"Screenshot of the Fine-tuned GPT Model interface\"\n    style=\"max-width: 100%; border-radius: 8px; border: 1px solid #e0e0e0; box-shadow: 0 0 10px rgba(0,0,0,0.1); margin-bottom: 15px;\"\n  >\n  <p>\n    <a \n      href=\"https://huggingface.co/spaces/doggdad/InstructGPTFinetuned\" \n      target=\"_blank\" \n      style=\"display: inline-block; background-color: #2196F3; color: white; padding: 10px 15px; text-decoration: none; border-radius: 4px; font-weight: bold;\"\n    >\n      Open the demo in Hugging Face Spaces\n    </a>\n  </p>\n</div>\n  <!-- Main iframe for the Gradio app -->\n  <iframe\n    id=\"gradio-iframe\"\n    src=\"https://doggdad-instructgptfinetuned.hf.space/?__theme=light\"\n    frameborder=\"0\"\n    width=\"100%\" \n    height=\"800px\"\n    style=\"border: 1px solid #e0e0e0; border-radius: 10px; box-shadow: 0 0 10px rgba(0,0,0,0.1);\"\n    allow=\"camera; microphone; clipboard-read; clipboard-write; fullscreen\"\n    loading=\"lazy\"\n    title=\"Fine-tuned GPT Model Interactive Demo\"\n    onload=\"document.getElementById('loading-container').style.display = 'none';\"\n    onerror=\"handleIframeError();\"\n  ></iframe>\n  \n  <!-- Loading indicator -->\n  <div id=\"loading-container\" style=\"text-align: center; padding: 40px; background-color: #f5f5f5; border-radius: 10px; margin-bottom: 20px;\">\n    <div class=\"loading-spinner\"></div>\n    <p style=\"margin-top: 20px; color: #333;\">Loading interactive demo...</p>\n  </div>\n\n  <!-- Notes and instructions -->\n  <div class=\"gradio-notes\">\n    <p>\n      <strong>Tips for using the model:</strong> \n      Try asking questions, requesting creative content, or giving specific instructions.\n    </p>\n    <div class=\"example-prompts\">\n      <button class=\"example-button\" onclick=\"copyToInput('What is the capital of France?')\">What is the capital of France?</button>\n      <button class=\"example-button\" onclick=\"copyToInput('What is the opposite of wet?')\">What is the opposite of wet?</button>\n      <button class=\"example-button\" onclick=\"copyToInput('What is the capital of USA?')\">What is the capital of USA?</button>\n    </div>\n  </div>\n</div>\n\n<style>\n  .gradio-embed-container {\n    margin: 2rem 0;\n    padding: 0;\n    background-color: #ffffff;\n    border-radius: 12px;\n    position: relative;\n  }\n  \n  .gradio-notes {\n    margin-top: 15px;\n    padding: 15px;\n    background-color: #f8f9fa;\n    border-radius: 8px;\n    border-left: 4px solid #2196F3;\n    font-size: 0.9rem;\n  }\n  \n  .example-prompts {\n    display: flex;\n    flex-wrap: wrap;\n    gap: 8px;\n    margin-top: 10px;\n  }\n  \n  .example-button {\n    background-color: #e8eaf6;\n    border: 1px solid #c5cae9;\n    border-radius: 20px;\n    padding: 6px 12px;\n    font-size: 0.85rem;\n    cursor: pointer;\n    transition: all 0.2s ease;\n  }\n  \n  .example-button:hover {\n    background-color: #c5cae9;\n  }\n  \n  /* Loading spinner */\n  .loading-spinner {\n    border: 5px solid #f3f3f3;\n    border-radius: 50%;\n    border-top: 5px solid #2196F3;\n    width: 50px;\n    height: 50px;\n    animation: spin 1s linear infinite;\n    margin: 0 auto;\n  }\n  \n  @keyframes spin {\n    0% { transform: rotate(0deg); }\n    100% { transform: rotate(360deg); }\n  }\n  \n  /* Responsive adjustments */\n  @media (max-width: 768px) {\n    .example-prompts {\n      flex-direction: column;\n    }\n    \n    .example-button {\n      width: 100%;\n      margin-bottom: 5px;\n    }\n    \n    #gradio-iframe {\n      height: 600px;\n    }\n  }\n</style>\n\n<script>\n  // Wait for document to be fully loaded\n  document.addEventListener('DOMContentLoaded', function() {\n    // Set a timeout to check if iframe loaded successfully\n    setTimeout(function() {\n      checkIframeLoaded();\n    }, 10000); // 10 seconds timeout\n  });\n  \n  // Function to check if iframe loaded\n  function checkIframeLoaded() {\n    const iframe = document.getElementById('gradio-iframe');\n    const loadingContainer = document.getElementById('loading-container');\n    \n    // If loading container is still visible after timeout, show fallback\n    if (loadingContainer.style.display !== 'none') {\n      handleIframeError();\n    }\n  }\n  \n  // Handle iframe loading error\n  function handleIframeError() {\n    document.getElementById('gradio-iframe').style.display = 'none';\n    document.getElementById('loading-container').style.display = 'none';\n    document.getElementById('fallback-container').style.display = 'block';\n  }\n  \n  // Function to copy example prompts to input (this won't work directly with iframe,\n  // but is included in case you want to implement message passing to the iframe later)\n  function copyToInput(text) {\n    // This is a placeholder - it won't actually work with the iframe\n    // unless you implement message passing using postMessage\n    alert(\"Example selected: \" + text + \"\\n\\nPlease copy and paste this into the input field in the demo.\");\n    \n    // Attempt to copy to clipboard\n    navigator.clipboard.writeText(text).then(function() {\n      console.log(\"Text copied to clipboard\");\n    }).catch(function(err) {\n      console.error(\"Could not copy text: \", err);\n    });\n  }\n</script>\n```\n\n### Try the demo above or visit the [full Hugging Face Space](https://huggingface.co/spaces/doggdad/InstructGPTFinetuned) for the best experience.\n\n\n\n\n# 10. Key Technical Achievements\n\n1. **Complete GPT Implementation**: Full transformer architecture with multi-head attention, layer normalization, and residual connections\n2. **From-Scratch Components**: Custom tokenizer, attention mechanisms, and training loops\n3. **Weight Transfer**: Successfully loading OpenAI GPT-2 pretrained weights (124M-1558M parameters)\n4. **Two Finetuning Approaches**: Classification (spam detection) and instruction-following\n5. **Advanced Sampling**: Temperature scaling and top-k sampling for controlled generation\n6. **Automated Evaluation**: LLM-based evaluation using local Ollama models\n7. **Laptop-Scale Training**: All code designed to run on conventional laptops without specialized hardware\n\n# References\n\n- **Book**: *Build a Large Language Model (From Scratch)* by Sebastian Raschka\n- **Publisher**: Manning Publications\n- **ISBN**: 9781633437166\n- **GitHub**: https://github.com/rasbt/LLMs-from-scratch\n\n","srcMarkdownNoYaml":"\n\n# 1. Set up\n\n## Create a virtual environment\n\nI highly recommend installing Python packages in a separate virtual environment to avoid modifying system-wide packages that your OS may depend on. To create a virtual environment in the current folder, follow the three steps below.\n\n<br>\n\n**1. Install uv**\n\n```bash\npip install uv\n```\n\n<br>\n\n**2. Create the virtual environment**\n\n```bash\nuv venv --python=python3.10\n```\n\n<br>\n\n**3. Activate the virtual environment**\n\n```bash\nsource .venv/bin/activate\n```\n&nbsp;\n\nNote that you need to activate the virtual environment each time you start a new terminal session. For example, if you restart your terminal or computer and want to continue working on the project the next day, simply run `source .venv/bin/activate` in the project folder to reactivate your virtual environment.\n\nOptionally, you can deactivate the environment it by executing the command `deactivate`.\n\n&nbsp;\n**4.Install packages**\n\nAfter activating your virtual environment, you can install Python packages using `uv`. For example:\n\n```bash\nuv pip install packaging\n```\n\nTo install all required packages from a `requirements.txt` file (such as the one located at the top level of this GitHub repository) run the following command, assuming the file is in the same directory as your terminal session:\n\n```bash\nuv pip install -r requirements.txt\n```\n\n\nAlternatively, install the latest dependencies directly from the repository:\n\n```bash\nuv pip install -r https://raw.githubusercontent.com/rasbt/LLMs-from-scratch/refs/heads/main/requirements.txt\n```\n\n\n&nbsp;\n\n**Note:**\nIf you have problems with the following commands above due to certain dependencies (for example, if you are using Windows), you can always fall back to using regular pip:\n\n `pip install -r requirements.txt`\n or\n`pip install -U -r https://raw.githubusercontent.com/rasbt/LLMs-from-scratch/refs/heads/main/requirements.txt`\n\n&nbsp;\n\n# 2. Working with text data\n\nThis section explores techniques for processing and working with text data for language models.\n```{python}\n#| echo: false\n#| output: false\n\n# This cell is used to set up the environment for the embedded notebook\n# It won't be displayed in the output\nimport sys\nimport os\n```\n\n{{< embed chapters/ch02.ipynb >}}\n\n# 3. Coding Attention Mechanisms\n\n{{< embed chapters/ch03.ipynb >}}\n\n# 4. Implementing a GPT model from Scratch To Generate Text \n\n{{< embed chapters/ch04.ipynb >}}\n\n# 5. Pretraining on Unlabeled Data\n\n{{< include chapters/ch05.md  >}}\n\n# 6. Finetuning for Text Classification\n\n{{< embed chapters/ch06.ipynb >}}\n\n# 7. Finetuning to Follow Instruction\n\n{{< embed chapters/ch07.ipynb >}}\n\n# 8. DPO for LLM Alignment\n\n{{< embed chapters/ch08.ipynb >}}\n\n# 9. Deployment in HF-Hub using Gradio\n\n```{python}\n#| echo: true \n#| output: false\n#| eval: false\n#| code-line-numbers: true\n#| code-copy: true\n\nfrom pathlib import Path\nimport sys\n\nimport tiktoken\nimport torch\nimport gradio as gr\n\n# For llms_from_scratch installation instructions, see:\n# https://github.com/rasbt/LLMs-from-scratch/tree/main/pkg\nfrom previous_chapters import GPTModel\n\nfrom previous_chapters import (\n    generate,\n    text_to_token_ids,\n    token_ids_to_text,\n)\n\ndevice = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n\n\ndef get_model_and_tokenizer():\n    \"\"\"\n    Code to load a GPT-2 model with finetuned weights generated in chapter 7.\n    This requires that you run the code in chapter 7 first, which generates the necessary gpt2-medium355M-sft.pth file.\n    \"\"\"\n\n    GPT_CONFIG_355M = {\n        \"vocab_size\": 50257,     # Vocabulary size\n        \"context_length\": 1024,  # Shortened context length (orig: 1024)\n        \"emb_dim\": 768,         # Embedding dimension\n        \"n_heads\": 12,           # Number of attention heads\n        \"n_layers\": 12,          # Number of layers\n        \"drop_rate\": 0.0,        # Dropout rate\n        \"qkv_bias\": True         # Query-key-value bias\n    }\n\n    tokenizer = tiktoken.get_encoding(\"gpt2\")\n\n    # For local development\n    model_path = Path(\"gpt2-small124M-sft.pth\")\n    \n    # For Hugging Face deployment\n    hf_model_path = Path(\"gpt2-small124M-sft.pth\")\n    \n    # Try loading from the Hugging Face model path first, then fall back to local\n    if hf_model_path.exists():\n        model_path = hf_model_path\n    elif not model_path.exists():\n        print(\n            f\"Could not find the model file. Please run the chapter 7 code \"\n            \"to generate the gpt2-medium355M-sft.pth file or upload it to this directory.\"\n        )\n        sys.exit()\n\n    checkpoint = torch.load(model_path, weights_only=True)\n    model = GPTModel(GPT_CONFIG_355M)\n    model.load_state_dict(checkpoint)\n    model.to(device)\n    model.eval()  # Set to evaluation mode\n\n    return tokenizer, model, GPT_CONFIG_355M\n\n\ndef extract_response(response_text, input_text):\n    return response_text[len(input_text):].replace(\"### Response:\", \"\").strip()\n\n\n# Load model and tokenizer\ntokenizer, model, model_config = get_model_and_tokenizer()\n\n\ndef generate_response(message, max_new_tokens=100):\n    \"\"\"Generate a response using the fine-tuned GPT model\"\"\"\n    torch.manual_seed(123)\n    \n    prompt = f\"\"\"Below is an instruction that describes a task. Write a response\n    that appropriately completes the request.\n\n    ### Instruction:\n    {message}\n    \"\"\"\n    \n    with torch.no_grad():  # Ensure no gradients are computed during inference\n        token_ids = generate(\n            model=model,\n            idx=text_to_token_ids(prompt, tokenizer).to(device),\n            max_new_tokens=max_new_tokens,\n            context_size=model_config[\"context_length\"],\n            eos_id=50256\n        )\n\n    text = token_ids_to_text(token_ids, tokenizer)\n    response = extract_response(text, prompt)\n    \n    return response\n\n\n# Create a custom chat interface without using ChatInterface class\ndef respond(message, chat_history):\n    bot_message = generate_response(message)\n    chat_history.append((message, bot_message))\n    return \"\", chat_history\n\n\nwith gr.Blocks(theme=\"soft\") as demo:\n    gr.Markdown(\"# Fine-tuned GPT Model Chat\")\n    gr.Markdown(\"Chat with a fine-tuned GPT model from 'Build a Large Language Model From Scratch' by Sebastian Raschka\")\n    \n    chatbot = gr.Chatbot(height=600)\n    msg = gr.Textbox(placeholder=\"Ask me something...\", container=False, scale=7)\n    clear = gr.Button(\"Clear\")\n    \n    msg.submit(respond, [msg, chatbot], [msg, chatbot])\n    clear.click(lambda: [], None, chatbot)\n    \n    gr.Examples(\n        examples=[\n            \"What is the capital of France?\",\n            \"What is the opposite of 'wet'?\",\n            \"what is the capital of USA?\"\n        ],\n        inputs=msg\n    )\n\n\n# Launch the interface\nif __name__ == \"__main__\":\n    demo.launch(share=True)\n\n```\n\n## Fine-tuned GPT Model Demo\n\nThis interactive demo showcases a GPT model fine-tuned using techniques from \"Build a Large Language Model From Scratch\" by Sebastian Raschka. Try asking questions or giving it instructions to see the model in action.\n\n```{=html}\n<div class=\"gradio-embed-container\">\n  <!-- Fallback image that displays if iframe fails to load -->\n  <div id=\"fallback-container\" style=\"display: none; text-align: center; margin: 20px 0;\">\n  <p style=\"color: #d32f2f; font-weight: bold;\">Interactive demo could not be loaded</p>\n  <img \n    src=\"chapters/HF_GPT2.png\" \n    alt=\"Screenshot of the Fine-tuned GPT Model interface\"\n    style=\"max-width: 100%; border-radius: 8px; border: 1px solid #e0e0e0; box-shadow: 0 0 10px rgba(0,0,0,0.1); margin-bottom: 15px;\"\n  >\n  <p>\n    <a \n      href=\"https://huggingface.co/spaces/doggdad/InstructGPTFinetuned\" \n      target=\"_blank\" \n      style=\"display: inline-block; background-color: #2196F3; color: white; padding: 10px 15px; text-decoration: none; border-radius: 4px; font-weight: bold;\"\n    >\n      Open the demo in Hugging Face Spaces\n    </a>\n  </p>\n</div>\n  <!-- Main iframe for the Gradio app -->\n  <iframe\n    id=\"gradio-iframe\"\n    src=\"https://doggdad-instructgptfinetuned.hf.space/?__theme=light\"\n    frameborder=\"0\"\n    width=\"100%\" \n    height=\"800px\"\n    style=\"border: 1px solid #e0e0e0; border-radius: 10px; box-shadow: 0 0 10px rgba(0,0,0,0.1);\"\n    allow=\"camera; microphone; clipboard-read; clipboard-write; fullscreen\"\n    loading=\"lazy\"\n    title=\"Fine-tuned GPT Model Interactive Demo\"\n    onload=\"document.getElementById('loading-container').style.display = 'none';\"\n    onerror=\"handleIframeError();\"\n  ></iframe>\n  \n  <!-- Loading indicator -->\n  <div id=\"loading-container\" style=\"text-align: center; padding: 40px; background-color: #f5f5f5; border-radius: 10px; margin-bottom: 20px;\">\n    <div class=\"loading-spinner\"></div>\n    <p style=\"margin-top: 20px; color: #333;\">Loading interactive demo...</p>\n  </div>\n\n  <!-- Notes and instructions -->\n  <div class=\"gradio-notes\">\n    <p>\n      <strong>Tips for using the model:</strong> \n      Try asking questions, requesting creative content, or giving specific instructions.\n    </p>\n    <div class=\"example-prompts\">\n      <button class=\"example-button\" onclick=\"copyToInput('What is the capital of France?')\">What is the capital of France?</button>\n      <button class=\"example-button\" onclick=\"copyToInput('What is the opposite of wet?')\">What is the opposite of wet?</button>\n      <button class=\"example-button\" onclick=\"copyToInput('What is the capital of USA?')\">What is the capital of USA?</button>\n    </div>\n  </div>\n</div>\n\n<style>\n  .gradio-embed-container {\n    margin: 2rem 0;\n    padding: 0;\n    background-color: #ffffff;\n    border-radius: 12px;\n    position: relative;\n  }\n  \n  .gradio-notes {\n    margin-top: 15px;\n    padding: 15px;\n    background-color: #f8f9fa;\n    border-radius: 8px;\n    border-left: 4px solid #2196F3;\n    font-size: 0.9rem;\n  }\n  \n  .example-prompts {\n    display: flex;\n    flex-wrap: wrap;\n    gap: 8px;\n    margin-top: 10px;\n  }\n  \n  .example-button {\n    background-color: #e8eaf6;\n    border: 1px solid #c5cae9;\n    border-radius: 20px;\n    padding: 6px 12px;\n    font-size: 0.85rem;\n    cursor: pointer;\n    transition: all 0.2s ease;\n  }\n  \n  .example-button:hover {\n    background-color: #c5cae9;\n  }\n  \n  /* Loading spinner */\n  .loading-spinner {\n    border: 5px solid #f3f3f3;\n    border-radius: 50%;\n    border-top: 5px solid #2196F3;\n    width: 50px;\n    height: 50px;\n    animation: spin 1s linear infinite;\n    margin: 0 auto;\n  }\n  \n  @keyframes spin {\n    0% { transform: rotate(0deg); }\n    100% { transform: rotate(360deg); }\n  }\n  \n  /* Responsive adjustments */\n  @media (max-width: 768px) {\n    .example-prompts {\n      flex-direction: column;\n    }\n    \n    .example-button {\n      width: 100%;\n      margin-bottom: 5px;\n    }\n    \n    #gradio-iframe {\n      height: 600px;\n    }\n  }\n</style>\n\n<script>\n  // Wait for document to be fully loaded\n  document.addEventListener('DOMContentLoaded', function() {\n    // Set a timeout to check if iframe loaded successfully\n    setTimeout(function() {\n      checkIframeLoaded();\n    }, 10000); // 10 seconds timeout\n  });\n  \n  // Function to check if iframe loaded\n  function checkIframeLoaded() {\n    const iframe = document.getElementById('gradio-iframe');\n    const loadingContainer = document.getElementById('loading-container');\n    \n    // If loading container is still visible after timeout, show fallback\n    if (loadingContainer.style.display !== 'none') {\n      handleIframeError();\n    }\n  }\n  \n  // Handle iframe loading error\n  function handleIframeError() {\n    document.getElementById('gradio-iframe').style.display = 'none';\n    document.getElementById('loading-container').style.display = 'none';\n    document.getElementById('fallback-container').style.display = 'block';\n  }\n  \n  // Function to copy example prompts to input (this won't work directly with iframe,\n  // but is included in case you want to implement message passing to the iframe later)\n  function copyToInput(text) {\n    // This is a placeholder - it won't actually work with the iframe\n    // unless you implement message passing using postMessage\n    alert(\"Example selected: \" + text + \"\\n\\nPlease copy and paste this into the input field in the demo.\");\n    \n    // Attempt to copy to clipboard\n    navigator.clipboard.writeText(text).then(function() {\n      console.log(\"Text copied to clipboard\");\n    }).catch(function(err) {\n      console.error(\"Could not copy text: \", err);\n    });\n  }\n</script>\n```\n\n### Try the demo above or visit the [full Hugging Face Space](https://huggingface.co/spaces/doggdad/InstructGPTFinetuned) for the best experience.\n\n\n\n\n# 10. Key Technical Achievements\n\n1. **Complete GPT Implementation**: Full transformer architecture with multi-head attention, layer normalization, and residual connections\n2. **From-Scratch Components**: Custom tokenizer, attention mechanisms, and training loops\n3. **Weight Transfer**: Successfully loading OpenAI GPT-2 pretrained weights (124M-1558M parameters)\n4. **Two Finetuning Approaches**: Classification (spam detection) and instruction-following\n5. **Advanced Sampling**: Temperature scaling and top-k sampling for controlled generation\n6. **Automated Evaluation**: LLM-based evaluation using local Ollama models\n7. **Laptop-Scale Training**: All code designed to run on conventional laptops without specialized hardware\n\n# References\n\n- **Book**: *Build a Large Language Model (From Scratch)* by Sebastian Raschka\n- **Publisher**: Manning Publications\n- **ISBN**: 9781633437166\n- **GitHub**: https://github.com/rasbt/LLMs-from-scratch\n\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":true,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"jupyter"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../../styles.css"],"toc":true,"toc-depth":1,"output-file":"index.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.8.25","theme":["cosmo","brand"],"title-block-banner":true,"title":"LLM From Scratch","author":"Dipankar Baisya","date":"2025-10-29","categories":["LLM","ML","Deep Learning"],"image":"image.jpg","toc-title":"Table of Contents","anchor-sections":true},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}